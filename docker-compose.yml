# docker-compose.yml - Phase 2 (User + Email + Notification Services)
version: "3.8"

services:
  # User Service (Laravel)
  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    container_name: user-service
    restart: unless-stopped
    working_dir: /var/www
    volumes:
      - ./user-service:/var/www
    networks:
      - microservices-network
    depends_on:
      - user-db
      - rabbitmq
    environment:
      - DB_HOST=user-db
      - DB_DATABASE=user_service
      - DB_USERNAME=postgres
      - DB_PASSWORD=password
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USERNAME=admin
      - RABBITMQ_PASSWORD=password

  email-service:
    build:
      context: ./email-service
      dockerfile: Dockerfile
    container_name: email-service
    restart: unless-stopped
    working_dir: /var/www
    volumes:
      - ./email-service:/var/www
    networks:
      - microservices-network
    depends_on:
      - email-db
      - rabbitmq
    environment:
      - DB_HOST=email-db
      - DB_DATABASE=email_service
      - DB_USERNAME=postgres
      - DB_PASSWORD=password
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USERNAME=admin
      - RABBITMQ_PASSWORD=password

  # Email Consumer (Background Processing)
  email-consumer:
    build:
      context: ./email-service
      dockerfile: Dockerfile
    container_name: email-consumer
    restart: unless-stopped
    working_dir: /var/www
    volumes:
      - ./email-service:/var/www
      - ./email-service/docker/supervisor/consumer.conf:/etc/supervisor/conf.d/supervisord.conf
    networks:
      - microservices-network
    depends_on:
      rabbitmq:
        condition: service_healthy
      email-db:
        condition: service_started
    environment:
      - DB_HOST=email-db
      - DB_DATABASE=email_service
      - DB_USERNAME=postgres
      - DB_PASSWORD=password
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USERNAME=admin
      - RABBITMQ_PASSWORD=password
    command: ["/usr/bin/supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"]

  # Analytics Service (Python)
  analytics-service:
    build:
      context: ./analytics-service
      dockerfile: Dockerfile
    container_name: analytics-service
    restart: unless-stopped
    working_dir: /usr/src/app
    volumes:
      - ./analytics-service:/usr/src/app
      - analytics_logs:/usr/src/app/logs
    networks:
      - microservices-network
    depends_on:
      - analytics-db
      - rabbitmq
    environment:
      - ENVIRONMENT=development
      - DB_HOST=analytics-db
      - DB_PORT=5432
      - DB_DATABASE=analytics_service
      - DB_USERNAME=postgres
      - DB_PASSWORD=password
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USERNAME=admin
      - RABBITMQ_PASSWORD=password
      - RABBITMQ_VHOST=/
    ports:
      - "4000:4000"

  # Notification Service (Node.js)
  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    container_name: notification-service
    restart: unless-stopped
    working_dir: /usr/src/app
    volumes:
      - ./notification-service:/usr/src/app
      - notification_logs:/usr/src/app/logs
    networks:
      - microservices-network
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      - NODE_ENV=development
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USERNAME=admin
      - RABBITMQ_PASSWORD=password
      - RABBITMQ_VHOST=/
      - DISCORD_WEBHOOK_URL=https://discord.com/api/webhooks/1376673323928256554/99WTLZWPhvj3rFv4U2BYo1icWsi-G6Mc2C_4SDPrKePdlqOwkxYsm6kE9tCr8JpeGhnX
    ports:
      - "3000:3000"

  # User Service Database
  user-db:
    image: postgres:15
    container_name: user-db
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: user_service
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - user_db_data:/var/lib/postgresql/data
    networks:
      - microservices-network

  # Email Service Database
  email-db:
    image: postgres:15
    container_name: email-db
    restart: unless-stopped
    ports:
      - "5433:5432"
    environment:
      POSTGRES_DB: email_service
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - email_db_data:/var/lib/postgresql/data
    networks:
      - microservices-network

  # Analytics Service Database
  analytics-db:
    image: postgres:15
    container_name: analytics-db
    restart: unless-stopped
    ports:
      - "5434:5432"
    environment:
      POSTGRES_DB: analytics_service
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - analytics_db_data:/var/lib/postgresql/data
    networks:
      - microservices-network

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: rabbitmq
    restart: unless-stopped
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: password
      RABBITMQ_DEFAULT_VHOST: /
      RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS: -rabbitmq_management load_definitions "/etc/rabbitmq/definitions.json"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./rabbitmq/definitions.json:/etc/rabbitmq/definitions.json:ro
    networks:
      - microservices-network
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3

  # Nginx for User Service
  nginx-user:
    image: nginx:alpine
    container_name: nginx-user
    restart: unless-stopped
    ports:
      - "8101:80"
    volumes:
      - ./user-service:/var/www
      - ./nginx/user-service.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - user-service
    networks:
      - microservices-network

  # Nginx for Email Service
  nginx-email:
    image: nginx:alpine
    container_name: nginx-email
    restart: unless-stopped
    ports:
      - "8002:80"
    volumes:
      - ./email-service:/var/www
      - ./nginx/email-service.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - email-service
    networks:
      - microservices-network

 # Kong Database
  kong-database:
    image: postgres:15
    container_name: kong-database
    restart: unless-stopped
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: kongpass
    volumes:
      - kong_db_data:/var/lib/postgresql/data
    networks:
      - microservices-network

  # Kong Migration (runs once to setup database)
  kong-migration:
    image: kong:3.4
    container_name: kong-migration
    command: "kong migrations bootstrap"
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kongpass
      KONG_PG_DATABASE: kong
    depends_on:
      - kong-database
    networks:
      - microservices-network
    restart: "no"

  # Kong Gateway
  kong:
    image: kong:3.4
    container_name: kong
    restart: unless-stopped
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kongpass
      KONG_PG_DATABASE: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_PROXY_LISTEN: 0.0.0.0:8000
    ports:
      - "8000:8000"  # API Gateway Entry Point (PUBLIC)
      - "8001:8001"  # Kong Admin API (PRIVATE)
    depends_on:
      - kong-migration
      - kong-database
    networks:
      - microservices-network

  # pgAdmin for Database Management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - microservices-network
    depends_on:
      - user-db
      - email-db
      - analytics-db

volumes:
  user_db_data:
  email_db_data:
  analytics_db_data:
  rabbitmq_data:
  notification_logs:
  analytics_logs:
  kong_db_data:
  pgadmin_data:

networks:
  microservices-network:
    driver: bridge
